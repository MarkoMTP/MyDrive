// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id         String   @id @default(uuid())
  sid        String   @unique
  data       String
  expiresAt  DateTime
}

//users model do
model User {
  id        String   @id @default(uuid()) // Unique identifier
  email     String   @unique             // Unique email for each user
  password  String                        // Password (hashed)
  createdAt DateTime @default(now())      // Timestamp when the user is created
  updatedAt DateTime @updatedAt           // Timestamp when the user is last updated
  folders   Folder[] // Relation to folders
  files     File[]  


  @@map("user")  
}


model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String      // Foreign key to User
  parentId  Int?     // For nested folders; nullable if it's a root folder
  parent    Folder?  @relation("Subfolders", fields: [parentId], references: [id])
  subfolders Folder[] @relation("Subfolders") // Recursive relation for nested folders
  files     File[]   // Relation to files in this folder
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model File {
  id         Int      @id @default(autoincrement())
  filename   String   // Original file name (provided by the user)
  url        String   // Cloud storage URL for accessing the file
  size       Int      // File size in bytes
  folder     Folder   @relation(fields: [folderId], references: [id])
  folderId   Int      // Foreign key to Folder
  user       User     @relation(fields: [userId], references: [id])
  userId     String   // Foreign key to User (for security and ownership tracking)
  uploadedAt DateTime @default(now()) // Timestamp of upload
  publicId   String?  // (Optional) Public ID assigned by the cloud provider
  format     String?  // (Optional) File format (e.g., jpg, png)
}
